#+title: RNA-seq Leg Vs Body workflow
#+STARTUP: overview
#+STARTUP: hideblocks
#+STARTUP: noinlineimages
#+SETUPFILE: https://fniessen.github.io/org-html-themes/org/theme-readtheorg.setup
#+EXPORT_FILE_NAME: index.html

* Introduction
This is a bio-informatics project created using the [[https://en.wikipedia.org/wiki/Literate_programming][literate programming]] paradigm. This particular implementation uses Emacs' [[https://orgmode.org/][orgmode]] to create various script files using code blocks. Emacs also acts as a pipeline manager in this case. Using the Emacs function =org-babel-execute-buffer= allows all the code in this repository to be executed at once.

The environment is constrained using the [[https://nixos.org/][nix]] build system. This ensures that at least parts of the project can be reproduced if given the same dataset.

This particular project involves ticks of the species /Dermicentor variabilis/, otherwise known as the American dog tick. This project analyses the effect of pesticides (Deet and Permethrin) on the gene expression of these ticks using various computational tools.

This project was created in [[http://insectphysiology.uc.edu/][Dr. Benoit's Lab]].
* Workflow overview
** Flowchart
There are many different steps involved in this project, here is the high level flowchart.
#+begin_src plantuml :file resources/flowchart.png :tangle scripts/utility/flowchart.puml
@startuml
!theme blueprint
:Fasta Files, Assembly;
Partition "**galaxy**" {
        split
            :Sailfish;
        split again
            :Salmon;
        split again
            :Kallisto;
        split again
            :FastQC;
            detach
        split end
        :Quant Files;
}
Partition "**Differential Analysis**" {
        :Tximport;
        split
            :Deseq2;
        split again
            :EdgeR;
        split again
            :Conversion Script;
            :WGCNA;
        split end
}
split
Partition "**Gene Ontology with FastBlast**"{
        :NCBI blast;
        split
            :"G:profiler";
            :Revigo;
        split again
            :"geneontology.com";
        split end
}
split again
split end
:Figures, Tables;
@enduml
#+end_src

#+RESULTS:
[[file:resources/flowchart.png]]

#+attr_html: :width=50%
#+RESULTS:
** Explanation
I was not originally a part of this project when the Fasta Files and genome assembly were created. My general understanding is that those steps occurred as part of a collaboration with Cincinnati Children's Medical Center.

I imported the data into [[https://usegalaxy.org][galaxy]] then ran the tool FastQC to determine if the data was of high enough quality. Once I knew that the data was of reasonable quality, I generated "quant" files using 3 different tools, Salmon, Kallisto, and Sailfish. These tools generate relative gene counts called TPMs (transcripts per million) and store them in quant files. I ended only using quant data from Sailfish and Salmon.

Once I had aquired the quant files from galaxy, I imported them into the R programming language using a package called =tximport=. I then used differential analysis tools (DESeq2, edgeR, and WGCNA) to determine which genes were differentially expressed in the dog ticks.

Once I had the differentially expressed genes, I was able to generate figures and tables. I also compared the differentially expressed genes to the /Ixodes/ genome using the software NCBI blast, so that I can determine the gene annotations (what the genes were actually doing). I was able to generate treemaps from that information.

I also compared my data to the time course data from another experiment led by a colleague in the Benoit labratory.
* Directory Structure
Unfortunately, I can't include the dataset in this repository (its too big!), so instead I will list what you need to run this project.

All of the data needed for this project should be put into various sub directories within the =data= directory.
** =assembly=
+ =assembly.fasta=
** =quant=
I used two subdirectories within this directory.
*** =main=
This is where all the data for the main analysis of the project is stored
*** =time_series=
This is where all the data for the time series analysis is stored

* How to run
My Emacs setup is very custom, so if you aren't me, then you should use these instructions:
+ Have an install of nix with [[https://nixos.wiki/wiki/Flakes][flakes]]. If you don't have this, then unfortunately I cannot ensure that you will have the same environment, if you are absolutely set on not using nix, then file an issue in the github and I'll walk you through making it work.
+ Clone the repository
+ Make sure you have everything setup according to [[Directory Structure]].
+ Run =nix run=
+ That's it! There should be an output directory with all the figures and tables.

If everything was done correctly then it should work, otherwise file an issue [[https://github.com/IllustratedMan-code/RNA-seq-Workflow][here]].
** Script by script
If run in a script by script basis, the code must be run from the root of this directory.
* Nix Scripts
First we need to setup a "pipeline" for the scripts to run in. This ensures that everything occurs in the right order.
** flake.nix
This is where the nix magic occurs. This file is where the reproducible environment is defined. This file generates a =flake.lock= file that pins all the git revisions for all the dependencies. Once the =flake.lock= file is created, this project can be built on any computer that can run nix (most of them) in exactly the same way. This means that if the build succeeds, the resulting program will be exactly the same. This file also makes the entire project easy to run, simply run =nix run=.
#+begin_src nix :tangle flake.nix
{
  inputs = {
    mach-nix.url = "mach-nix/3.5.0";
  };

  outputs = {self, nixpkgs, mach-nix }@inp:
    let
      system = "x86_64-linux";
      pkgs = import nixpkgs{inherit system;};
      lsp = ''
        python-lsp-server
        flake8
        pylint
        autopep8
        pydocstyle
        rope
        yapf
      '';
      python_requirements = ''
        pandas
        numpy
        matplotlib
        rich
      '';
      MyRPackages = with pkgs.rPackages; [
        ggplot2
        DESeq2
        tximport
        edgeR
      ];
      Renv = pkgs.rWrapper.override{
        packages = with pkgs.rPackages; MyRPackages;
      };
      pyenv = mach-nix.lib."${system}".mkPython {
        python = "python38";
        requirements = lsp + python_requirements;
      };
      deps = with pkgs; [pyenv Renv which];
    in
     {
       packages."${system}" = with pkgs; {
         default = stdenv.mkDerivation{
          name = "pipeline";
          buildInputs = deps;
          src = self;
          buildPhase = ''
          '';
          installPhase = ''
            mkdir $out

            cp -r scripts $out/scripts
            cp -r data $out/data

            mkdir $out/bin
            echo out=$out >> $out/bin/pipeline
            echo src=$src >> $out/bin/pipeline
            echo python=$(which python) >> $out/bin/pipeline

            cat $src/scripts/pipeline.sh >> $out/bin/pipeline

            chmod +x $out/bin/pipeline
          '';
         };
       };
       devShells.${system} = with pkgs; {
         default = mkShell{
           buildInputs = deps ++ [plantuml];
         };
       };
    };
}
#+end_src

** pipeline.sh
This is a simple bash file that manages all the steps of this project.
#+begin_src bash :tangle scripts/pipeline.sh
#!/usr/bin/env bash

# create data directory if configure script fails
nixout=$out $python $out/scripts/configure.py

#+end_src
** configure.py
This script will configure the data directory so that the rest of the pipeline can run. This includes creating the directory if necessary.
#+begin_src python :tangle scripts/configure.py
from rich import print
from rich.panel import Panel
from glob import glob
import os
import sys
import shutil

nixout = os.getenv("nixout")
if not nixout:
    nixout = "./"

if not os.path.isdir("data"):
    print(Panel("data directory does not exist, [red]creating. Rerun once you have placed the appropriate data files into the data directory."))
    shutil.copytree(nixout + "/data", "./data")
    sys.exit(1)
if not os.path.isdir("output"):
    print(Panel("output directory does not exist, [red]creating.")
    shutil.copytree(nixout + "/output", "./output")
#+end_src
This section is where the code for the analysis is written. No figures are created in this section.
* Analysis
** Data Organization
*** Metadata
Metadata is needed to organize the project in a way that the program can understand. Here is the metadata I used for this project.
#+name: main
| name                | pesticides | part | trial |
| Per_Bod_1.tabular   | perm       | body |     1 |
| Per_Bod_3.tabular   | perm       | body |     3 |
| Per_Leg_3.tabular   | perm       | leg  |     3 |
| Per_Leg_2.tabular   | perm       | leg  |     2 |
| Per_Leg_1.tabular   | perm       | leg  |     1 |
| Deet_Bod_3.tabular  | deet       | body |     3 |
| Deet_Bod_2.tabular  | deet       | body |     2 |
| Deet_Bod_1.tabular  | deet       | body |     1 |
| Deet_Leg_3.tabular  | deet       | leg  |     3 |
| Deet_Leg_2.tabular  | deet       | leg  |     2 |
| Deet_Leg_1.tabular  | deet       | leg  |     1 |
| Cont_Bod_3.tabular  | control    | body |     3 |
| Cont_Bod_2.tabular  | control    | body |     2 |
| Cont_Bod_1.tabular  | control    | body |     1 |
| Cont_Leg_3.tabular  | control    | leg  |     3 |
| Cont_Leg_2a.tabular | control    | leg  |     2 |
| Cont_Leg_1.tabular  | control    | leg  |     1 |

#+name: time_series
| name                 | condition       | pesticides | time    |
| Cont-1.tabular       | control-control | control    | control |
| Cont-2.tabular       | control-control | control    | control |
| Cont-3.tabular       | control-control | control    | control |
| PER-2h-A.tabular     | perm-2h         | perm       | 2h      |
| PER-2h-B.tabular     | perm-2h         | perm       | 2h      |
| PER-2h-C.tabular     | perm-2h         | perm       | 2h      |
| PER-6h-A.tabular     | perm-6h         | perm       | 6h      |
| PER-6h-B.tabular     | perm-6h         | perm       | 6h      |
| PER-6h-C.tabular     | perm-6h         | perm       | 6h      |
| PER-24h-A.tabular    | perm-24h        | perm       | 24h     |
| PER-24h-B.tabular    | perm-24h        | perm       | 24h     |
| PER-24h-C.tabular    | perm-24h        | perm       | 24h     |
| Deet-0.25h-1.tabular | deet-0.25h      | deet       | 0.25h   |
| Deet-0.25h-2.tabular | deet-0.25h      | deet       | 0.25h   |
| Deet-0.25h-3.tabular | deet-0.25h      | deet       | 0.25h   |
| Deet-4h-1.tabular    | deet-4h         | deet       | 4h      |
| Deet-4h-2.tabular    | deet-4h         | deet       | 4h      |
| Deet-4h-3.tabular    | deet-4h         | deet       | 4h      |
| Deet-24h-1.tabular   | deet-24h        | deet       | 24h     |
| Deet-24h-2.tabular   | deet-24h        | deet       | 24h     |
| Deet-24h-3.tabular   | deet-24h        | deet       | 24h     |

We will write the metadata to the =data/metadata= directory using a small script.
This step is not present in the pipeline, and should be added manually.
#+begin_src python :var main=main :var time_series=time_series
import csv
import os
with open("data/metadata/main.csv", "w") as f:
    writer = csv.writer(f)
    writer.writerows(main)
with open("data/metadata/time_series.csv", "w") as f:
    writer = csv.writer(f)
    writer.writerows(time_series)
#+end_src

#+RESULTS:
: None

*** Import the data
The data cannot be imported into differential analysis tools directly, so processing has to occur before analysis.
**** Import using tximport
Now we need to create the txi objects so we can import them into the differential analysis tools. Since we will need to import more than once, I created a function for tximport.
#+begin_src R :tangle scripts/analysis/import_functions.r

create_txi <- function(meta_name, quant_type){
  library(tximport)
  metadata <- read.csv(file.path("data/metadata", paste(meta_name, "csv", sep=".")), header=TRUE)
  files <- file.path("data/quant", meta_name, metadata$name)
  names(files) = metadata$name
  assembly = read.table("data/assembly/assembly.tabular")
  txi <- tximport(files, type=quant_type, tx2gene=assembly)
  return(txi)
}

#+end_src

#+RESULTS:
**** Import into Deseq2
Here I created a function to import the txi object from the previous section into a deseq2 object.
#+begin_src R :tangle scripts/analysis/import_functions.r
create_deseq <-function(meta_name, txi, design){
  library(DESeq2)
  metadata <- read.csv(file.path("data/metadata", paste(meta_name, "csv", sep=".")), header=TRUE)
  dataset <- DESeqDataSetFromTximport(txi, colData=metadata, design=design)
  deseq <- DESeq(dataset)
  return(deseq)
}
#+end_src

#+RESULTS:

**** Import into EdgeR
Here I created a function to import the txi object into an edgeR object. This is a little more complicated.
#+begin_src R :tangle scripts/analysis/import_functions.r
create_edgeR <- function(txi, meta){
  library(edgeR)
}
#+end_src

#+RESULTS:

**** Import into WGCNA
***** Convert data to WGCNA
****** Build WGCNA data file from quant file
WGCNA doesn't understand tximport datasets, so we must manipulate the quant files into a dataset that WGCNA can understand.
#+begin_src python :tangle scripts/analysis/import_functions.py
import pandas as pd
from itertools import combinations
def convert_to_WGCNA(meta_name):
    # quant files
    meta = pd.read_csv(f"data/metadata/{meta_name}.csv")
    data = pd.DataFrame()
    for i in meta.name:
        data[i] = pd.read_table(f"data/quant/{meta_name}/{i}")["TPM"]
    truth = pd.DataFrame()

    truth["sample"] = meta["name"]
    # truth table
    for col in meta.columns[1::]:
        comparisons = meta[col].unique()
        for comparison in comparisons:
            truth[col +"_"+ str(comparison)] = meta[col].apply(lambda x: int(x == col))
    extracomparisions = combinations(truth.columns[1::], 2)
    for comparison in extracomparisions:
        truth[comparison[0] + "__" + comparison[1]] = truth[[comparison[0], comparison[1]]].apply(lambda x: x[comparison[0]] or x[comparison[1]], axis=1)

    return truth
return convert_to_WGCNA("main")
#+end_src

#+RESULTS:
#+begin_example
sample  pesticides_perm  ...  trial_1__trial_2  trial_3__trial_2
0     Per_Bod_1.tabular                0  ...                 0                 0
1     Per_Bod_3.tabular                0  ...                 0                 0
2     Per_Leg_3.tabular                0  ...                 0                 0
3     Per_Leg_2.tabular                0  ...                 0                 0
4     Per_Leg_1.tabular                0  ...                 0                 0
5    Deet_Bod_3.tabular                0  ...                 0                 0
6    Deet_Bod_2.tabular                0  ...                 0                 0
7    Deet_Bod_1.tabular                0  ...                 0                 0
8    Deet_Leg_3.tabular                0  ...                 0                 0
9    Deet_Leg_2.tabular                0  ...                 0                 0
10   Deet_Leg_1.tabular                0  ...                 0                 0
11   Cont_Bod_3.tabular                0  ...                 0                 0
12   Cont_Bod_2.tabular                0  ...                 0                 0
13   Cont_Bod_1.tabular                0  ...                 0                 0
14   Cont_Leg_3.tabular                0  ...                 0                 0
15  Cont_Leg_2a.tabular                0  ...                 0                 0
16   Cont_Leg_1.tabular                0  ...                 0                 0

[17 rows x 37 columns]
#+end_example

****** Build metadata table for WGCNA
#+begin_src python

#+end_src

#+RESULTS:

** Differential Expression Analysis
*** Deseq2
**** Get the genes
Deseq is initialized with a formula of =~part + pesticides=. This formula ensures that all factors are taken into account when determining =log2FoldChange= values. Deseq can only directly compare 2 factors when exporting results, so the =contrast= argument is used to specify the direct comparison.
#+begin_src R :tangle scripts/analysis/deseq2.r  :async :session deseq
# source functions
if(Sys.getenv("nixout") != ""){
  out = Sys.getenv("nixout")
}else{
  out = "./"
}
source(paste(out, "scripts/analysis/import_functions.r", sep="/"))

#+end_src

#+RESULTS:

#+begin_src R :tangle scripts/analysis/deseq2.r :session deseq :async
main_txi <- create_txi("main", "sailfish")
main <- create_deseq("main", main_txi, ~part + pesticides)
time_series_txi <- create_txi("time_series", "sailfish")
time_series <- create_deseq("time_series", time_series_txi, ~condition)

# variance stabilized data
vsd <- list("main" = assay(vst(main)), "time_series" = assay(vst(time_series)) )

# compare the part of the tick (body vs leg) with the different pesticides
deet <- results(main, contrast=c("pesticides", "deet", "control"))
perm <- results(main, contrast=c("pesticides", "perm", "control"))
body_leg <- results(main, contrast=c("part", "body", "leg"))

get_time_comparison = function(pest_time){
  return(results(time_series, contrast=c("condition", pest_time, "control-control")))
}
perm_2h <- get_time_comparison("perm-2h")
perm_6h <- get_time_comparison("perm-6h")
perm_24h <- get_time_comparison("perm-24h")

deet_2h <- get_time_comparison("deet-0.25h")
deet_4h <- get_time_comparison("deet-4h")
deet_24h <- get_time_comparison("deet-24h")


#+end_src

#+RESULTS:

**** Functions for selecting genes
These are utility functions for selecting the genes based on adjusted p-value (=padj=) and =log2FoldChange=.
#+begin_src R :tangle scripts/analysis/deseq2.r :session deseq :async
# function for determining significance
significant = function(results, threshold){
  # which is needed to remove NA values
  return(results[which(results$padj < threshold),])
}
# returns upregulated genes
upRegulated = function(results, threshold){
  return(results[which(results$log2FoldChange > threshold),])
}
# returns downRegulated genes
downRegulated = function(results, threshold){
  return(results[which(results$log2FoldChange < threshold),])
}

#+end_src

#+RESULTS:

**** Select the genes
The genes are selected using the previously defined [[Functions for selecting genes][functions]] and =sapply= to apply the functions to all of the data at once. An adjusted p-value of 0.01 was chosen as the statistical cutoff value. A log2FoldChange range of \((\infty < -2) \cup (2 < \infty)\) was chosen to differentiate unregulated vs regulated genes.
#+begin_src R :tangle scripts/analysis/deseq2.r :session deseq :async
# select for adjusted p value less than 0.01
data <- list(
  "deet" = deet,
  "perm" = perm,
  "body_leg" = body_leg,
  "perm_2h" = perm_2h,
  "perm_6h" = perm_6h,
  "perm_24h" = perm_24h,
  "deet_2h" = deet_2h,
  "deet_4h" = deet_4h,
  "deet_24h" = deet_24h)
# apply function to every member of data
# select for p value less than 0.01
data <- sapply(data, significant, threshold=0.01)
# select for genes with log2FoldChange larger than 2
up_regulated = sapply(data, upRegulated, threshold=2)
# select for genes with log2FoldChange less than -2
down_regulated = sapply(data, downRegulated, threshold=-2)

#+end_src

#+RESULTS:
**** Save the Results
This is a good intermediate step. This also allows for export of tables. Unfortunately, it makes it slightly harder to re-import data as shown later.
#+begin_src R :tangle scripts/analysis/deseq2.r :session deseq :async
save_table = function(name, parentdir, table){
  filename = sprintf("./output/deseq_tables/%s/%s.csv", parentdir, name)
  write.csv(table, filename)
}
write_data = function(data, prefix){
  lapply(names(data), function(name) save_table(name, prefix, data[[name]]))
}

write_data(data, "data")
write_data(up_regulated, "up_regulated")
write_data(down_regulated, "down_regulated")
write_data(vsd, "variance_stabilized")
#+end_src

#+RESULTS:

*** EdgeR
** WGCNA
** Gene Ontology
*** Blast
NCBI blast is a tool to map the genes of one species to another, so that gene annotations can be determined. In this case, Dermacentor Variabilis genes need to be mapped onto Ixodes Scapularis genes. This is one of the more time consuming tasks in the pipeline.
#+begin_src

#+end_src

* Figures
Now the fun part! Plotting the data. This section is almost fully dependent upon the metadata. I don't think I can make it more generic without compromising code integrity. The good news is that most of this is in functions, so user configuration is possible.
** Plotting functions
#+begin_src R :session figures :tangle scripts/figures/figures.r :async
library(tidyverse)
options(pillar.subtle = FALSE)
get_data <- function(name){
  csv <- read_csv(sprintf("./output/deseq_tables/%s",name))
  names(csv)[1] <- "rows"
  return(csv)
}
csv_data = list("deet" = get_data("data/deet.csv"),
            "perm" = get_data("data/perm.csv"),
            "body_leg" = get_data("data/body_leg.csv"),
            "deet_24h" = get_data("data/deet_24h.csv"),
            "deet_2h" = get_data("data/deet_2h.csv"),
            "deet_4h" = get_data("data/deet_4h.csv"),
            "perm_24h" = get_data("data/perm_24h.csv"),
            "perm_2h" = get_data("data/perm_2h.csv"),
            "perm_6h" = get_data("data/perm_6h.csv")
            )
csv_data_up = list("deet" = get_data("up_regulated/deet.csv"),
            "perm" = get_data("up_regulated/perm.csv"),
            "body_leg" = get_data("up_regulated/body_leg.csv"),
            "deet_24h" = get_data("up_regulated/deet_24h.csv"),
            "deet_2h" = get_data("up_regulated/deet_2h.csv"),
            "deet_4h" = get_data("up_regulated/deet_4h.csv"),
            "perm_24h" = get_data("up_regulated/perm_24h.csv"),
            "perm_2h" = get_data("up_regulated/perm_2h.csv"),
            "perm_6h" = get_data("up_regulated/perm_6h.csv")
            )
csv_data_down = list("deet" = get_data("down_regulated/deet.csv"),
            "perm" = get_data("down_regulated/perm.csv"),
            "body_leg" = get_data("down_regulated/body_leg.csv"),
            "deet_24h" = get_data("down_regulated/deet_24h.csv"),
            "deet_2h" = get_data("down_regulated/deet_2h.csv"),
            "deet_4h" = get_data("down_regulated/deet_4h.csv"),
            "perm_24h" = get_data("down_regulated/perm_24h.csv"),
            "perm_2h" = get_data("down_regulated/perm_2h.csv"),
            "perm_6h" = get_data("down_regulated/perm_6h.csv")
            )
vsd = list("main" = get_data("variance_stabilized/main.csv"),
           "time_series" = get_data("variance_stabilized/time_series.csv"))
#+end_src

#+RESULTS:

*** kmeans plot
Two functions are defined here to manipulate the data in a way that facilitates plotting. =kplot_var_data= is used for [[Figure 9: Time Course Legs][Figure 9]] and [[Figure 10: Time Course Body][Figure 10]].
#+begin_src R :session figures :tangle scripts/figures/figures.r :async
kplot <- function(data, order,clusters = 10 ) {
  stack_data <- function(name) {
    table <- data[[name]]
    table <- as.data.frame(table)
    row.names(table) <- table[, 1]
    table <- table[, -1]
    table$cluster <- kmeans(table, clusters, clusters)$cluster
    return(table)
  }
  km <- lapply(names(data), stack_data)
  names(km) <-names(data)

  km <- bind_rows(km, .id="column_label")
  km <- as_tibble(km, rownames = "rows")
  pl <- ggplot(km, aes(x = factor(column_label, levels=order), y = baseMean)) + geom_jitter(aes(color = column_label)) + facet_wrap(~cluster, ncol=2)
  return(pl)
}
# example usage
order <- c("body_leg", "deet", "deet_2h", "deet_4h", "deet_24h", "perm_2h", "perm_6h", "perm_24h")
#d <- kplot(csv_data, order)

# kplot for variance data. This "melts" the data to a usable form for plottling
kplot_var_data <- function(data,clusters = 10){
  stack_data <- function(vsd){
    km <- kmeans(vsd[,-1], clusters, clusters)
    vsd$cluster <- km$cluster
    return(gather(vsd, "name", "value", -cluster, -rows))
  }
  add_meta <- function(stacked_data, meta){
    return(merge(stacked_data, meta, by.x="name", by.y="name"))
  }
  apply_meta <- function(name, data){
    meta <- read_csv(sprintf("data/metadata/%s.csv", "time_series"))
    data[[name]]<-add_meta(data[[name]], meta)
  }
  d <- lapply(data, stack_data)
  d <- lapply(names(d), apply_meta, data=d)
  d <- lapply(d, as_tibble)
  names(d) <- names(data)
  return(d)
}
# usage
#+end_src

#+RESULTS:

** Figure 1: Methods Comparison
Comparison between edgeR and DESeq2 using Pearson correlation Coefficient
** TODO Figure 2: Perm and DEET repellency and survival
Waiting on email from Andrew.
** Figure 3: Legs vs Body
*** Venn diagram
This plots a venn diagram comparing leg and body genes, where the center is genes that are unregulated. These are all statistically significant (adjusted p value < 0.01)
#+begin_src R :session figures :tangle scripts/figures/figures.r :async
library(ggVennDiagram)
both <- csv_data$body_leg$rows
body <- both[! both %in% csv_data_down$body_leg$rows]
leg <- both[! both %in% csv_data_up$body_leg$rows]
plot <- list("body" = body, "leg" = leg)
pl <- ggVennDiagram(plot, color="black", edge_size = 0) + scale_fill_distiller(palette = "Blues" )
ggsave("./output/figures/figure_3/plot.svg", pl)
ggsave("./output/figures/figure_3/plot.png", pl)
#+end_src
#+RESULTS:
*** Treemap body
need to blast, then revigo, then treemap
*** Treemap Legs
** TODO Figure 4: Legs Vs Body specifics and overlap with Ixodes
Maybe skip
** Figure 5: Deet expression in body and Leg
*** Venn Diagram: Deet expression in body genes
#+begin_src R :session figures :tangle scripts/figures/figures.r :async
body <- csv_data_up$body_leg$rows
deet <- csv_data_up$deet$rows
plot <- list("body" = body, "deet" = deet)
pl <- ggVennDiagram(plot, color="black", edge_size = 0) + scale_fill_distiller(palette = "Blues" )
ggsave("./output/figures/figure_5/body_plot.svg", pl)
ggsave("./output/figures/figure_5/body_plot.png", pl)

#+end_src

#+RESULTS:
: ./output/figures/figure_5/body_plot.png

*** Venn Diagram: Deet Expression in Leg genes
Most deet regulated genes are not regulated in the leg
#+begin_src R :session figures :tangle scripts/figures/figures.r :async
leg <- csv_data_down$body_leg$rows
deet <- csv_data_up$deet$rows
plot <- list("leg" = both, "deet" = deet)
pl <- ggVennDiagram(plot, color="black", edge_size = 0) + scale_fill_distiller(palette = "Blues" )
ggsave("./output/figures/figure_5/leg_plot.svg", pl)
ggsave("./output/figures/figure_5/leg_plot.png", pl)

#+end_src

#+RESULTS:
: ./output/figures/figure_5/leg_plot.png

** Figure 6: Perm expression in body and leg
*** Venn Diagram: Perm expression in body genes
#+begin_src R :session figures :tangle scripts/figures/figures.r :async
body <- csv_data_up$body_leg$rows
perm <- csv_data_up$perm$rows
plot <- list("body" = body, "perm" = perm)
pl <- ggVennDiagram(plot, color="black", edge_size = 0) + scale_fill_distiller(palette = "Blues" )
ggsave("./output/figures/figure_5/body_plot.svg", pl)
ggsave("./output/figures/figure_5/body_plot.png", pl)

#+end_src
*** Venn Diagram: Perm Expression in Leg genes
#+begin_src R :session figures :tangle scripts/figures/figures.r :async
leg <- csv_data_down$body_leg$rows
deet <- csv_data_up$deet$rows
plot <- list("leg" = both, "deet" = deet)
pl <- ggVennDiagram(plot, color="black", edge_size = 0) + scale_fill_distiller(palette = "Blues" )
ggsave("./output/figures/figure_5/leg_plot.svg", pl)
ggsave("./output/figures/figure_5/leg_plot.png", pl)

#+end_src
** Figure 7: WGCNA analysis (GO analysis of blue and pink modules)
** Figure 8: Overlap between body and leg response
** Figure 9: Time Course Legs
This is a kmeans plot of genes deferentially expressed in the tick leg compared to the time course data (time_series)
#+begin_src R :session figures :tangle scripts/figures/figures.r :async
time_series <- vsd$time_series
time_series_body_leg <- list(
  "leg" = subset(time_series, time_series$rows %in% csv_data_down$body_leg$rows),
  "body" = subset(time_series, time_series$rows %in% csv_data_up$body_leg$rows)
)
d <- kplot_var_data(time_series_body_leg)
d$leg <- d$leg[!(d$leg$pesticides == "control"), ]
order <- c("deet-0.25h", "deet-4h", "deet-24h", "perm-2h", "perm-6h", "perm-24h")
pl <- ggplot(d$leg, aes(x = factor(condition, levels = order), y = value)) +
  geom_jitter(aes(color = condition)) +
  ggh4x::facet_grid2(cluster ~ factor(pesticides, levels = c("deet", "perm")), scales = "free", independent = "y") +
  geom_boxplot(alpha = 0) +
  stat_summary(aes(y = value, group = 1), fun = median, colour = "black", geom = "line", group = 1) +
  ggtitle("Variance Stabilized Kmean Clusters for Genes Expressed in Tick Legs")
ggsave("./output/figures/figure_9/plot.svg", pl)
ggsave("./output/figures/figure_9/plot.png", pl)
#+end_src

#+RESULTS:
: ./output/figures/figure_9/plot.png

** Figure 10: Time Course Body
This is a kmeans plot of genes deferentially expressed in the tick body compared to the time course data (time_series)
#+begin_src R :session figures :tangle scripts/figures/figures.r :async
d$body <- d$body[!(d$body$pesticides == "control"),]
order <- c("deet-0.25h", "deet-4h", "deet-24h", "perm-2h", "perm-6h", "perm-24h")
pl <- ggplot(d$body, aes(x = factor(condition, levels=order), y = value)) +
  geom_jitter(aes(color = condition), size = 0.5) +
  ggh4x::facet_grid2(cluster ~ factor(pesticides, levels=c("deet", "perm")), scales="free", independent="y") +
  geom_boxplot(alpha = 0) +
  stat_summary(aes(y = value, group = 1), fun = median, colour = "black", geom = "line", group = 1) +
  ggtitle("Variance Stabilized Kmean Clusters for Genes Expressed in Tick Legs")
ggsave("./output/figures/figure_10/plot.svg", pl, height=12, width=7)
ggsave("./output/figures/figure_10/plot.png", pl, height=12, width=7)
#+end_src

#+RESULTS:
: ./output/figures/figure_10/plot.png
